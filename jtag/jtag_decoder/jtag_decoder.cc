#include <stdio.h>
#include <stdlib.h>
#include <unistd.h>
#include <errno.h>
#include <string.h>
#include <sys/types.h>
#include <sys/stat.h>
#include <sys/ioctl.h>
#include <fcntl.h>
#include <iostream>
#include <fstream>
#include <sstream>
#include <string>

#define KINTEX7_ID 0x03647093
#define VIRTEX7_ID 0x33691093

std::ofstream f("bitstream.dat", std::ios::out | std::ios::binary | std::ios::app);

const uint8_t bitRevTable[256] =
{
    0x00, 0x80, 0x40, 0xc0, 0x20, 0xa0, 0x60, 0xe0,
    0x10, 0x90, 0x50, 0xd0, 0x30, 0xb0, 0x70, 0xf0,
    0x08, 0x88, 0x48, 0xc8, 0x28, 0xa8, 0x68, 0xe8,
    0x18, 0x98, 0x58, 0xd8, 0x38, 0xb8, 0x78, 0xf8,
    0x04, 0x84, 0x44, 0xc4, 0x24, 0xa4, 0x64, 0xe4,
    0x14, 0x94, 0x54, 0xd4, 0x34, 0xb4, 0x74, 0xf4,
    0x0c, 0x8c, 0x4c, 0xcc, 0x2c, 0xac, 0x6c, 0xec,
    0x1c, 0x9c, 0x5c, 0xdc, 0x3c, 0xbc, 0x7c, 0xfc,
    0x02, 0x82, 0x42, 0xc2, 0x22, 0xa2, 0x62, 0xe2,
    0x12, 0x92, 0x52, 0xd2, 0x32, 0xb2, 0x72, 0xf2,
    0x0a, 0x8a, 0x4a, 0xca, 0x2a, 0xaa, 0x6a, 0xea,
    0x1a, 0x9a, 0x5a, 0xda, 0x3a, 0xba, 0x7a, 0xfa,
    0x06, 0x86, 0x46, 0xc6, 0x26, 0xa6, 0x66, 0xe6,
    0x16, 0x96, 0x56, 0xd6, 0x36, 0xb6, 0x76, 0xf6,
    0x0e, 0x8e, 0x4e, 0xce, 0x2e, 0xae, 0x6e, 0xee,
    0x1e, 0x9e, 0x5e, 0xde, 0x3e, 0xbe, 0x7e, 0xfe,
    0x01, 0x81, 0x41, 0xc1, 0x21, 0xa1, 0x61, 0xe1,
    0x11, 0x91, 0x51, 0xd1, 0x31, 0xb1, 0x71, 0xf1,
    0x09, 0x89, 0x49, 0xc9, 0x29, 0xa9, 0x69, 0xe9,
    0x19, 0x99, 0x59, 0xd9, 0x39, 0xb9, 0x79, 0xf9,
    0x05, 0x85, 0x45, 0xc5, 0x25, 0xa5, 0x65, 0xe5,
    0x15, 0x95, 0x55, 0xd5, 0x35, 0xb5, 0x75, 0xf5,
    0x0d, 0x8d, 0x4d, 0xcd, 0x2d, 0xad, 0x6d, 0xed,
    0x1d, 0x9d, 0x5d, 0xdd, 0x3d, 0xbd, 0x7d, 0xfd,
    0x03, 0x83, 0x43, 0xc3, 0x23, 0xa3, 0x63, 0xe3,
    0x13, 0x93, 0x53, 0xd3, 0x33, 0xb3, 0x73, 0xf3,
    0x0b, 0x8b, 0x4b, 0xcb, 0x2b, 0xab, 0x6b, 0xeb,
    0x1b, 0x9b, 0x5b, 0xdb, 0x3b, 0xbb, 0x7b, 0xfb,
    0x07, 0x87, 0x47, 0xc7, 0x27, 0xa7, 0x67, 0xe7,
    0x17, 0x97, 0x57, 0xd7, 0x37, 0xb7, 0x77, 0xf7,
    0x0f, 0x8f, 0x4f, 0xcf, 0x2f, 0xaf, 0x6f, 0xef,
    0x1f, 0x9f, 0x5f, 0xdf, 0x3f, 0xbf, 0x7f, 0xff,
};

void error(const char *msg)
{
  perror(msg);
  exit(0);
}


int shiftJtag(char* tms, char* tdi, int32_t length)
{
  int n;
  int32_t num_bits = length;
  int32_t num_bytes = (num_bits+7)/8;

  f.write(tms, sizeof tms);
  f.write(tdi, sizeof tdi);

  n = num_bytes;

  return n;
}

int flipbytes(unsigned char* src, unsigned char* flipped, int size)
{
   for (int i=0; i<size; i++)
    {
     *(flipped+i) = bitRevTable[*(src+i)];
      // printf ("0x%02x 0x%02x\n", *(src+i), *(flipped+i));
    }
  return size;
}

int sleepJtag(int32_t delay)
{
  int cnt = 0;
  int num_bits = delay;
  char tck[4];

  while (cnt < delay) {
     num_bits = (delay < 32) ? delay : 32;
     shiftJtag(tck, tck, num_bits);
     cnt += num_bits;
  }

  return delay;
}

int decode_binfile(char* binfile)
{
  int n=0;

  char tms_vec[4];
  char tdi_vec[4];

  // TLR + enter SHIFT-IR
  int32_t num_bits = 10;
  tms_vec[0] = 0xDF;
  tms_vec[1] = 0x0;
  tdi_vec[0] = 0x0;
  tdi_vec[1] = 0x0;

  shiftJtag(tms_vec, tdi_vec, num_bits);

  // JPROGRAM + enter RTI state
  num_bits = 11;
  tms_vec[0] = 0xE0;
  tms_vec[1] = 0x01;
  tdi_vec[0] = 0xB; // JPROGRAM
  tdi_vec[1] = 0x0;

  shiftJtag(tms_vec, tdi_vec, num_bits);

  // CFG_IN + UPDATE-IR
  num_bits = 8;
  tms_vec[0] = 0x60;
  tdi_vec[0] = 0x5; // CFG_IN

  shiftJtag(tms_vec, tdi_vec, num_bits);

  // delay for 10ms  or will need to change to 10000/20000 TCK in RTI state
  sleepJtag(400000);

  // SELECT-DR + SHIFT-DR
  num_bits = 3;
  tms_vec[0] = 0x1;
  tdi_vec[0] = 0x0;

  shiftJtag(tms_vec, tdi_vec, num_bits);

  // Shift in the FPGA bitstream from binfile
  int cnt = 0;
  int nread = 4;
  char buf[4];
  int fd = open(binfile, O_RDONLY);
  if (fd < 0) {
    error("ERROR opening binfile");
    return -1;
  }

  struct stat st;
  off_t binfile_size;

  if (stat(binfile, &st) < 0)
  {
    error("ERROR in stat()");
    return -1;
  }
  else
  {
    binfile_size = st.st_size;
    printf("binfile size: %ld\n", binfile_size);
  }

  while ((nread = read(fd, buf, 4)) > 0) {
    if (nread < 4) {
       // printf("last bit\n");
       *(tms_vec+nread-1) = 0x80;
    }
    flipbytes((unsigned char*)buf, (unsigned char*)tdi_vec, nread);
    shiftJtag(tms_vec, tdi_vec, nread*8);
    cnt += nread;
    // printf("\n");
  }
  printf("\nRead %d bytes from binfile %s\n", cnt, binfile);

  if (fd) close(fd);

  // UPDATE-DR + RTI + SELECT-IR + SHIFT-IR
  num_bits = 6;
  tms_vec[0] = 0xD;
  tdi_vec[0] = 0x0;

  shiftJtag(tms_vec, tdi_vec, num_bits);

  // JSTART + UPDATE-IR + moveto RTI
  num_bits = 7;
  tms_vec[0] = 0x60;
  tdi_vec[0] = 0x0C;

  shiftJtag(tms_vec, tdi_vec, num_bits);

  // delay for 2ms  or will need to change to 2000 TCK in RTI state
  sleepJtag(2000);

  // move to TLR
  num_bits = 3;
  tms_vec[0] = 0x7;
  tdi_vec[0] = 0x0;

  shiftJtag(tms_vec, tdi_vec, num_bits);

  return n;
}

int main(int argc, char *argv[])
{
  char * binfile = NULL;

  if (argc < 2)
  {
    fprintf(stderr,"usage %s device_file binfile\n", argv[0]);
    exit(0);
  }

  if (argc == 2)
  {
    binfile = argv[1];
    printf("Decode bitstream from %s\n", binfile);
  }

  if (binfile != NULL)
  {
    decode_binfile(binfile);
    printf("Decoded!\n");
  }

  f.close();

  return 0;
}
